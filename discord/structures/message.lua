local discord = ... --Passed as an argument.
local class = discord.class --Middleclass.
local bit = discord.utilities.bit --Universal bit API.

local band = bit.band

local message = class("discord.structures.Message")

--A function for verifying the arguments types of a method
local function Verify(value, name, ...)
    local vt, types = type(value), {...}
    for _, t in pairs(types) do if vt == t or (t=="nil" and not v) then return end end --Verified successfully
    types = table.concat(types, "/")
    local emsg = string.format("%s should be %s, provided: %s", name, types, vt)
    error(emsg, 3)
end

--https://discordapp.com/developers/docs/resources/channel#message-object-message-flags
local messageFlags = {
    [1] = "CROSSPOSTED",
    [2] = "IS_CROSSPOST",
    [4] = "SUPPRESS_EMBEDS"
}

--New message object
function message:initialize(data)
    Verify(data, "data", "table")

    --== Basic Fields ==--

    self.id = discord.snowflake(data.id) --ID of the message (snowflake)
    self.channelID = discord.snowflake(data.channel_id) --ID of the channel the message was sent in (snowflake)
    self.content = data.content --Contents of the message (string)
    self.timestamp = data.timestamp --When the message was sent (number)
    self.tts = data.tts --Whether this was a TTS message (boolean)
    self.mentionEveryone = data.mention_everyone --Where this message mentions everyone (boolean)
    self.pinned = data.pinned --Whether this message is pinned (boolean)
    self.type = discord.enums.messageTypes[data.type] --Type of message (string)

    --== Optional Fields ==--

    --The author of this message (not guaranteed to be a valid user) (user)
    if data.author then self.author = discord.user(data.author) end
    --ID of the guild the message was sent in (snowflake)
    if data.guild_id then self.guildID = discord.snowflake(data.guild_id) end
    --Member properties for this message's author (guild member)
    if data.member then self.member = discord.guildMember(data.member) end
    self.editedTimestamp = data.edited_timestamp --When the message was edited (or null if never) (number)
    if data.mentions then --Users specifically mentioned in the message (array of user objects)
        self.mentions = {}
        for id, udata in pairs(data.mentions) do
            self.mentions[id] = discord.user(udata)
        end
    end
    if data.mention_roles then --Roles specifically mentioned in this message (array of snowflake objects)
        self.mentionRoles = {}
        for id, snowflake in pairs(data.mention_roles) do
            self.mentionRoles[id] = discord.snowflake(snowflake)
        end
    end
    if data.attachments then --Any attached files (array of attachment objects)
        self.attachments = {}
        for id, adata in pairs(data.attachments) do
            self.attachments[id] = discord.attachment(adata)
        end
    end
    if data.embeds then --Any embedded (array of embed objects)
        self.embeds = {}
        for id, edata in pairs(data.embeds) do
            self.embeds = discord.embed(edata)
        end
    end
    if data.mention_channels then --Channels specifically mentioned in this message (array of channel mention objects)
        self.mentionChannels = {}
        for id, cmdata in pairs(data.mention_channels) do
            self.mentionChannels[id] = discord.channelMention(cmdata)
        end
    end
    if data.reactions then --Reactions to the message (array of reaction objects)
        self.reactions = {}
        for id, rdata in pairs(data.reactions) do
            self.reactions[id] = discord.reaction(rdata)
        end
    end
    --Used for validating a message was sent (snowflake)
    if data.nonce then self.nonce = discord.snowflake(data.nonce) end
    --If the message is generated by a webhook, this is the webhook's id (snowflake)
    if data.webhook_id then self.webhookID = discord.snowflake(data.webhook_id) end
    self.activity = data.activity --TODO: MESSAGE ACTIVITY OBJECT
    self.application = data.application --TODO: MESSAGE APPLICATION OBJECT
    self.messageReference = data.message_reference --TODO: MESSAGE REFERENCE OBJECT
    if data.flags then --Message flags, describes extra features of the message (array of strings)
        self.flags = {}
        for b, flag in pairs(messageFlags) do
            if band(data.flags,b) > 0 then
                self.flags[#self.flags + 1] = flag
            end
        end
    end
end

--== Methods ==--

--Tells if the user id is mentioned
function message:isUserMentioned(user)
    Verify(user, "user", "table")
    if not self.mentions then return false end --Can't know
    for k,v in pairs(self.mentions) do
        if v == user then return true end
    end
    return false
end

--Returns the author user object
function message:getAuthor()
    return self.author
end

--Returns the message content
function message:getContent()
    return self.content
end

--Returns the list of specifically mentioned users ids
function message:getMentions()
    if not self.mentions then return {} end --Can't know
    local mentions = {}
    for k,v in pairs(self.mentions) do
        mentions[k] = v
    end
    return mentions
end

--Returns a basic channel object for ONLY replying
--Inly the id field has a proper value, and the channel type is just set into GUILD_TEXT, other fields nil
function message:getReplyChannel()
    return discord.channel{
        id = tostring(self.channelID),
        type = discord.enums.channelTypes["GUILD_TEXT"]
    }
end

return message